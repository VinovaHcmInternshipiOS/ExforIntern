//
//  ListUserPresenter.swift
//  CoreDataExample
//
//  Created nguyen gia huy on 19/10/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import UIKit
import CoreData
// MARK: View -
protocol ListUserViewProtocol: class {
    
}
// MARK: Presenter -
protocol ListUserPresenterProtocol: class {
    var viewListUser: ListUserViewProtocol? { get set }
    func fetchUser() -> [Users]
    func deleteUser(position: Int, dataTable: [Users])
    func updateUser(position: Int, dataTable: [Users], name: String)
    func undoManager()
    func nestedUndoGroup()
    func fetchCredit(keyCredit: Users)-> [Credits]
    func checkDuplication(name: String) -> Bool
    
}

class ListUserPresenter: ListUserPresenterProtocol {
    
    
    weak var viewListUser: ListUserViewProtocol?
    var dataUser = [Users]()
    var dataCredit = [Credits]()
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    
    func fetchUser()-> [Users] {
        do {
            dataUser = try self.context.fetch(Users.fetchRequestUsers())
            dataUser.sort(by: {$0.creditCard!.count >= $1.creditCard!.count})
            
        }
        catch let error{
            print(error)
        }
        return dataUser
    }
    
    func fetchCredit(keyCredit: Users)-> [Credits] {
        do {
            dataCredit = try self.context.fetch(Credits.fetchRequestCreditsByKey(key: keyCredit))
        }
        catch let error{
            print(error)
        }
        return dataCredit
    }
    
    func deleteUser(position: Int, dataTable: [Users]){
        dataUser = dataTable
        context.delete(dataUser[position])
        do{
            try self.context.save()
        }
        catch{
            
        }
    }
    
        func updateUser(position: Int, dataTable: [Users],name: String){
    
            dataTable[position].name = name
    
            do {
                try self.context.save()
            }
            catch let error{
                print(error)
            }
    
    
    
        }
    func checkDuplication(name: String) -> Bool {
        var stateName = false
        do {
            dataUser = try self.context.fetch(Users.fetchRequestUsers())
        }
        catch let error{
           print(error)
        }
        if let data = dataUser as [Users]? {
            for index in data {
                if name == index.name! {
                    stateName = true
                    break
                }
                else {
                    stateName = false
                }
            }
        }
        return stateName
    }
//    func updateUser(position: Int, dataTable: [Users], name: String) {
//        let request = NSBatchUpdateRequest(entityName: "Users")
//        let predicate = NSPredicate(format: "name == %@", "\(dataTable[position].name ?? "")")
//        request.predicate = predicate
//        request.propertiesToUpdate = ["name":name]
//        request.resultType = .updatedObjectIDsResultType
//
//        do {
//
//            try context.execute(request)
//        }catch let error{
//            print(error)
//        }
//    }
    func undoManager() {
        print(dataUser[0])
        context.reset()
        print(dataUser[0])
        
    }
    
    func nestedUndoGroup() {
        print(dataUser[0])
        context.rollback()
        print(dataUser[0])
                context.undoManager?.endUndoGrouping()
                context.undoManager?.undo()
                context.undoManager = UndoManager()
        
                context.undoManager?.beginUndoGrouping()
                let user1 = Users(context: context)
                user1.name = "Malco"
                context.undoManager?.endUndoGrouping()
        
                context.undoManager?.beginUndoGrouping()
                let user2 = Users(context: context)
                user2.name = "Curtis"
                context.undoManager?.endUndoGrouping()
        
                print("Begin: ",user1.name as Any,user2.name as Any)
                
                //context.undoManager?.undoNestedGroup()
                print("Undo Item 1: ",user1.name as Any,user2.name as Any)
        
                context.undoManager?.undo()
                print("Undo Item 2: ",user1.name as Any,user2.name as Any)
    }
    
}

