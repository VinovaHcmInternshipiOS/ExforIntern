//
//  ListUserViewController.swift
//  CoreDataExample
//
//  Created nguyen gia huy on 19/10/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class ListUserViewController: UIViewController, ListUserViewProtocol {
  
    @IBOutlet weak var stateTable: UILabel!
    @IBOutlet weak var tableView: UITableView!
    var presenter: ListUserPresenterProtocol
    var dataTable = [Users]()
    var idUser = ""
    var sortIndex = 0
    private var pullControl = UIRefreshControl()
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    init(presenter: ListUserPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "ListUserViewController", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewListUser = self
        setupXIB()
        setupNav(titleNav: "List Users")
        getCoreDataDBPath()
        pullRefreshData()
        fetchData()
    }
    
    override func viewWillAppear(_ animated: Bool) {
       // fetchData()
    }
    
    
    func fetchData(){
        dataTable = presenter.fetchUser()
        if dataTable.count == 0 {
            stateTable.isHidden = true 
        }
        else {
            stateTable.isHidden = false
        }
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    @objc func pulledRefreshControl(sender:AnyObject) {
        pullControl.endRefreshing()
        fetchData()
    }
    
    private func pullRefreshData() {
        pullControl.attributedTitle = NSAttributedString(string: "Pull To Refresh")
        pullControl.addTarget(self, action: #selector(pulledRefreshControl), for: UIControl.Event.valueChanged)
        tableView.addSubview(pullControl)
    }
    func getCoreDataDBPath() {
            let path = FileManager
                .default
                .urls(for: .applicationSupportDirectory, in: .userDomainMask)
                .last?
                .absoluteString
                .replacingOccurrences(of: "file://", with: "")
                .removingPercentEncoding
            print("Core Data DB Path :: \(path ?? "Not found")")
        }
    
    private func setupXIB(){
        tableView.register(UINib(nibName: "ListUserTableViewCell", bundle: nil), forCellReuseIdentifier: "ListUserTableViewCell")
        tableView.delegate = self
        tableView.dataSource = self
    }
    func setupNav(titleNav: String){
        navigationController?.navigationBar.barStyle = .black
        navigationItem.title = titleNav
   
        navigationController?.navigationBar.barTintColor = .orange //Background
        let attributes = [NSAttributedString.Key.foregroundColor: UIColor.white] //Text Color
        navigationController?.navigationBar.titleTextAttributes = attributes
        
        let createBtn = UIBarButtonItem(image: UIImage(systemName: "plus"), style: .plain, target: self, action: #selector(actionCreate(sender:)))
        createBtn.tintColor = .black
        navigationItem.rightBarButtonItem = createBtn
        
        let sortBtn = UIBarButtonItem(image: UIImage(systemName: "line.horizontal.3.decrease.circle"), style: .plain, target: self, action: #selector(actionSort(sender:)))
        sortBtn.tintColor = .black
        navigationItem.leftBarButtonItem = sortBtn
        
    }
    @objc func actionCreate(sender: UIBarButtonItem) {
        let createView = CreateUserViewController(presenter: CreateUserPresenter())
        createView.presenter.viewCreateUser = self // Auth Delegate
        
        createView.reloadCreate = { [self] in
            fetchData()
        }
        
        self.navigationController?.pushViewController(createView, animated: true)
    }
    @objc func actionSort(sender: UIBarButtonItem) {
        
        switch sortIndex {
        case 0:
            sortIndex += 1
            dataTable.sort(by: {$0.creditCard!.count >= $1.creditCard!.count})
            
            
        case 1:
            sortIndex = 0
            dataTable.sort(by: {$0.creditCard!.count <= $1.creditCard!.count})
        default:
            break
        }
        tableView.reloadData()
    }
    
    
    
}
extension ListUserViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if dataTable.count != 0 {
            stateTable.isHidden = true
        }
        else {
            stateTable.isHidden = false
        }
        return dataTable.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "ListUserTableViewCell", for: indexPath) as? ListUserTableViewCell else {return UITableViewCell()}
        if presenter.fetchCredit(keyCredit: dataTable[indexPath.row]).count != 0{
            cell.lbCount.isHidden = false
        }
        else {
            cell.lbCount.isHidden = true
        }
        cell.setupData(user: dataTable[indexPath.row], count: "\(presenter.fetchCredit(keyCredit: dataTable[indexPath.row]).count )")
        return cell
    }
    
    
}
extension ListUserViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return tableView.estimatedRowHeight
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let creditVC = ListCreditViewController(presenter: ListCreditPresenter())
        creditVC.keyDetail = dataTable[indexPath.row]
        creditVC.sortListUsers = { [self] in
            fetchData()
        }
        self.navigationController?.pushViewController(creditVC, animated: true)
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let delete = UIContextualAction(style: .destructive, title: "Delete", handler: { [self](action,view,completionHandler) in
            
            let alert = UIAlertController(title: "Confirm", message: "Do you really want to delete ?",preferredStyle: UIAlertController.Style.alert)
            
            alert.addAction(UIAlertAction(title: "Cancel", style: UIAlertAction.Style.cancel, handler: { _ in
                tableView.reloadData()
            }))
            alert.addAction(UIAlertAction(title: "OK",style: UIAlertAction.Style.destructive,handler: {(_: UIAlertAction!) in
            presenter.deleteUser(position: indexPath.row, dataTable: dataTable)
            fetchData()
            }))
            self.present(alert, animated: true, completion: nil)
            
            
        })
        
        let edit = UIContextualAction(style: .normal, title: "Edit", handler: { [self](action,view,completionHandler) in
            let user = dataTable[indexPath.row]
            let alertUpdate = UIAlertController(title: "Edit Name", message: nil , preferredStyle: .alert)
            alertUpdate.addTextField()
            let name = alertUpdate.textFields![0]
            name.clearButtonMode = .always
            name.text = user.name
            let saveButton = UIAlertAction(title: "Save", style: .default, handler: { _ in ()
                let name = alertUpdate.textFields![0]
                if name.text == user.name{
                    alertSystem(title: "Warning", content: "Nothing changes")
                }
                else{
                    if presenter.checkDuplication(name: removeWhitespaces(text: name.text!)) == true {
                        let alert = UIAlertController(title: "An Error", message: "Name already exists ", preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { [self] action in
                            present(alertUpdate, animated: true, completion: nil)
                        }))
                        self.present(alert, animated: true, completion: nil)
                    }
                    else {
                        presenter.updateUser(position: indexPath.row, dataTable: dataTable, name: name.text!)
                        let alert = UIAlertController(title: "Update User", message: "Success ", preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { [self] action in
                            fetchData()
                        }))
                        self.present(alert, animated: true, completion: nil)
                    }

                }
  
                
            })
            let cancelButton = UIAlertAction(title: "Cancel", style: .destructive, handler: { _ in ()
                fetchData()
            })
            alertUpdate.addAction(cancelButton)
            alertUpdate.addAction(saveButton)
            present(alertUpdate, animated: true, completion: nil)

        })
        edit.backgroundColor = #colorLiteral(red: 0.1764705926, green: 0.4980392158, blue: 0.7568627596, alpha: 1)
        delete.backgroundColor = #colorLiteral(red: 0.8171495795, green: 0.1939333081, blue: 0.2262191176, alpha: 1)
        return UISwipeActionsConfiguration(actions: [delete,edit])
    }
}
extension ListUserViewController:CreateUserViewProtocol {
    func createSuccess(user: [Users]) {
        dataTable = user
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }

    func createError() {
        
    }




}
