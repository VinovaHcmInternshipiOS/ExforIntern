//
//  ListCreditPresenter.swift
//  CoreDataExample
//
//  Created nguyen gia huy on 21/10/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import UIKit
// MARK: View -
protocol ListCreditViewProtocol: class {

}

// MARK: Presenter -
protocol ListCreditPresenterProtocol: class {
	var viewListCredit: ListCreditViewProtocol? { get set }
    func fetchCredit(keyCredit: Users) -> [Credits]
    func deleteCredit(position: Int, dataTable: [Credits])
    func updateCredit(position: Int, dataTable: [Credits],creditNumber: String)
    func checkDuplication(credit: String) -> Bool
}

class ListCreditPresenter: ListCreditPresenterProtocol {
    weak var viewListCredit: ListCreditViewProtocol?
    var dataCredit = [Credits]()
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    
    func fetchCredit(keyCredit: Users)-> [Credits] {
        
        do {
            dataCredit = try self.context.fetch(Credits.fetchRequestCreditsByKey(key: keyCredit))
        }
        catch let error{
            print(error)
        }
        return dataCredit
    }
    func checkDuplication(credit: String) -> Bool {
        var stateCredit = false
        do {
            dataCredit = try self.context.fetch(Credits.fetchRequestCredits())
            
        }
        catch let error{
           print(error)
        }
        if let data = dataCredit as [Credits]? {
            for index in data {
                if credit == index.number! {
                    stateCredit = true
                    break
                }
                else {
                    stateCredit = false
                }
            }
        }
        return stateCredit
    }
    
    func deleteCredit(position: Int, dataTable: [Credits]){
        dataCredit = dataTable
        context.delete(dataCredit[position])
        do{
            try self.context.save()
        }
        catch{

        }
    }
    
    func updateCredit(position: Int, dataTable: [Credits],creditNumber: String){
        
        dataTable[position].number = creditNumber
        
        do {
            try self.context.save()
        }
        catch let error{
            print(error)
        }
    }
    
   

}
